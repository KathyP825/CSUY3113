CheckCollision
--------------
Youtube link:
https://www.youtube.com/watch?v=l02cLIroe78&list=PL_QmvmIfJvh1puziUV_XSo9Jg4j3E9vOX&index=15
--------------

-   normally apply velocity first, then move
-   if want to move diagonally:
    -   take the velocity and apply it to the current position

--------------

Instead of doing it in 1 shot, break into parts:
1)  use Y-velocity first
    -   check if collided with anything and adjust based on penetration
2)  add X-velocity next
    -   check if collided with anything and adjust based on penetration
3)  draw where the object ended up

--------------

Update() Code:

void Entity::Update(float deltaTime, Entity *platforms, int platformCount) {
    velocity += acceleration * deltaTime;

    position.y += velocity.y * deltaTime;   // Move on Y
    CheckCollisionsY(platforms, platformCount);     // Fix if needed

    position.x += velocity.x * deltaTime;   // Move on X
    CheckCollisionsX(platforms, platformCount);     // Fix if needed
}

-   2 seperate functions
    1)  handles Y
    2)  handles X

--------------

CheckCollisionsY() Code:

void Entity::CheckCollisionsY(Entity *objects, int objectCount) {
    for (int i = 0; i < objectCount; i++) {
        Entity *object = &objects[i];

        if (CheckCollision(object)) {
            float ydist = fabs(position.y - object->position.y);
            float penetrationY = fabs(ydist - (height / 2.0f) - (object->height / 2.0f));

            if (velocity.y > 0) {
                position.y -= penetrationY;
                velocity.y = 0;
            }
            else if (velocity.y < 0) {
                position.y += penetrationY;
                velocity.y = 0;
            }
        }
    }
}

--------------

CheckCollisionsX() Code:

void Entity::CheckCollisionsX(Entity *objects, int objectCount) {
    for (int i = 0; i < objectCount; i++) {
        Entity *object = &objects[i];

        if (CheckCollision(object)) {
            float xdist = fabs(position.x - object->position.x);
            float penetrationX = fabs(xdist - (width / 2.0f) - (object->width / 2.0f));

            if (velocity.x > 0) {
                position.x -= penetrationX;
                velocity.x = 0;
            }
            else if (velocity.x < 0) {
                position.x += penetrationX;
                velocity.x = 0;
            }
        }
    }
}

